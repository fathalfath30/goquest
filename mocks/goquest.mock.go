// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	goquest "github.com/fathalfath30/goquest"
	mock "github.com/stretchr/testify/mock"
)

// GoQuestMock is an autogenerated mock type for the IGoQuest type
type GoQuestMock struct {
	mock.Mock
}

// AddHeader provides a mock function with given fields: key, value
func (_m *GoQuestMock) AddHeader(key string, value string) goquest.IGoQuest {
	ret := _m.Called(key, value)

	var r0 goquest.IGoQuest
	if rf, ok := ret.Get(0).(func(string, string) goquest.IGoQuest); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(goquest.IGoQuest)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: endpoint, option
func (_m *GoQuestMock) Delete(endpoint string, option *goquest.RequestOption) (*goquest.Response, error) {
	ret := _m.Called(endpoint, option)

	var r0 *goquest.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *goquest.RequestOption) (*goquest.Response, error)); ok {
		return rf(endpoint, option)
	}
	if rf, ok := ret.Get(0).(func(string, *goquest.RequestOption) *goquest.Response); ok {
		r0 = rf(endpoint, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goquest.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *goquest.RequestOption) error); ok {
		r1 = rf(endpoint, option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: endpoint, option
func (_m *GoQuestMock) Get(endpoint string, option *goquest.RequestOption) (*goquest.Response, error) {
	ret := _m.Called(endpoint, option)

	var r0 *goquest.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *goquest.RequestOption) (*goquest.Response, error)); ok {
		return rf(endpoint, option)
	}
	if rf, ok := ret.Get(0).(func(string, *goquest.RequestOption) *goquest.Response); ok {
		r0 = rf(endpoint, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goquest.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *goquest.RequestOption) error); ok {
		r1 = rf(endpoint, option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: endpoint, option
func (_m *GoQuestMock) Patch(endpoint string, option *goquest.RequestOption) (*goquest.Response, error) {
	ret := _m.Called(endpoint, option)

	var r0 *goquest.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *goquest.RequestOption) (*goquest.Response, error)); ok {
		return rf(endpoint, option)
	}
	if rf, ok := ret.Get(0).(func(string, *goquest.RequestOption) *goquest.Response); ok {
		r0 = rf(endpoint, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goquest.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *goquest.RequestOption) error); ok {
		r1 = rf(endpoint, option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: endpoint, option
func (_m *GoQuestMock) Post(endpoint string, option *goquest.RequestOption) (*goquest.Response, error) {
	ret := _m.Called(endpoint, option)

	var r0 *goquest.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *goquest.RequestOption) (*goquest.Response, error)); ok {
		return rf(endpoint, option)
	}
	if rf, ok := ret.Get(0).(func(string, *goquest.RequestOption) *goquest.Response); ok {
		r0 = rf(endpoint, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goquest.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *goquest.RequestOption) error); ok {
		r1 = rf(endpoint, option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: endpoint, option
func (_m *GoQuestMock) Put(endpoint string, option *goquest.RequestOption) (*goquest.Response, error) {
	ret := _m.Called(endpoint, option)

	var r0 *goquest.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *goquest.RequestOption) (*goquest.Response, error)); ok {
		return rf(endpoint, option)
	}
	if rf, ok := ret.Get(0).(func(string, *goquest.RequestOption) *goquest.Response); ok {
		r0 = rf(endpoint, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goquest.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *goquest.RequestOption) error); ok {
		r1 = rf(endpoint, option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: method, endpoint, requestOption
func (_m *GoQuestMock) Send(method string, endpoint string, requestOption *goquest.RequestOption) (*goquest.Response, error) {
	ret := _m.Called(method, endpoint, requestOption)

	var r0 *goquest.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *goquest.RequestOption) (*goquest.Response, error)); ok {
		return rf(method, endpoint, requestOption)
	}
	if rf, ok := ret.Get(0).(func(string, string, *goquest.RequestOption) *goquest.Response); ok {
		r0 = rf(method, endpoint, requestOption)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goquest.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *goquest.RequestOption) error); ok {
		r1 = rf(method, endpoint, requestOption)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGoQuestMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewGoQuestMock creates a new instance of GoQuestMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGoQuestMock(t mockConstructorTestingTNewGoQuestMock) *GoQuestMock {
	mock := &GoQuestMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
